# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022-12
# This file is distributed under the same license as the URE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: URE 1.0rc\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-12-19 22:00+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"

#: ../../glossary/storage/path.rst:5
msgid "Path Storage"
msgstr ""

#: ../../glossary/storage/path.rst:7
msgid "**Audience:** Users who want to share files between components."
msgstr ""

#: ../../glossary/storage/path.rst:10
msgid ""
"The Lightning Storage system makes it easy to share files between "
"LightningWork so you can run your app both locally and in the cloud "
"without changing the code."
msgstr ""

#: ../../glossary/storage/path.rst:16
msgid "What is a Path Object ?"
msgstr ""

#: ../../glossary/storage/path.rst:18
msgid ""
"The Path object is a reference to a specific file or directory from a "
"LightningWork and can be used to transfer those files to another "
"LightningWork (one way, from source to destination)."
msgstr ""

#: ../../glossary/storage/path.rst:20
msgid ""
"A good mental representation of the Path Object usage is the `relay race "
"<https://en.wikipedia.org/wiki/Relay_race>`_. To make a transfer, the "
"receiver asks (e.g when the path object is passed by the flow to the "
"receiver) for a copy of the files (baton) owned by their producer (e.g "
"the LightningWork which created the files)."
msgstr ""

#: ../../glossary/storage/path.rst:28
msgid "How does the Path Object works internally ?"
msgstr ""

#: ../../glossary/storage/path.rst:30
msgid ""
"To understand the Path Object internal, let's first answer this question:"
" How do you locate a specific file or folder within a distributed system "
"made of multiple machines ?"
msgstr ""

#: ../../glossary/storage/path.rst:32
msgid ""
"You need to know on which machine the file or folder is located (e.g the "
"LightningWork name uniquely identify its own machine in the cloud) and "
"then you need the local path of the file or folder on that machine."
msgstr ""

#: ../../glossary/storage/path.rst:35
msgid ""
"In simple words, the Lightning Path augments :class:`pathlib.Path` object"
" by tracking on which machine the file or folder is located."
msgstr ""

#: ../../glossary/storage/path.rst:41
msgid "When to use Path storage ?"
msgstr ""

#: ../../glossary/storage/path.rst:43
msgid ""
"In the cloud, every :class:`~lightning_app.core.work.LightningWork` runs "
"in a separate machine with its own filesystem. This means files in one "
"Work cannot be directly accessed in another like you would be able to "
"when running the app locally. But with Lightning Storage, this is easy: "
"Simply declare which files need to be shared and Lightning will take care"
" of the rest."
msgstr ""

#: ../../glossary/storage/path.rst:57
msgid "Tell Lightning where your files are"
msgstr ""

#: ../../glossary/storage/path.rst:59
msgid ""
"Convert every filesystem path you want to share with other LightningWorks"
" to by adding ``lit://`` in front of it."
msgstr ""

#: ../../glossary/storage/path.rst:84
msgid ""
"Under the hood, we convert this string to a "
":class:`~lightning.app.storage.path.Path` object, which is a drop-in "
"replacement for :class:`pathlib.Path` meaning it will work with "
":mod:`os`, :mod:`os.path` and :mod:`pathlib` filesystem operations out of"
" the box!"
msgstr ""

#: ../../glossary/storage/path.rst:92
msgid "Access files in another Work"
msgstr ""

#: ../../glossary/storage/path.rst:94
msgid ""
"Accessing files from another LightningWork is as easy as handing the path"
" over by reference. For example, share a directory by passing it as an "
"input to the run method of the destination work:"
msgstr ""

#: ../../glossary/storage/path.rst:115
msgid ""
"When the destination Work starts, Lightning will automatically transfer "
"the files to its filesystem (if they exist on the other end):"
msgstr ""

#: ../../glossary/storage/path.rst:126
msgid ""
"The automatic transfer only happens if the referenced files already exist"
" in the originating LightningWork and it will overwrite any files that "
"already exist locally. In all other cases, you can trigger the transfer "
"manually."
msgstr ""

#: ../../glossary/storage/path.rst:135
msgid "Get files manually"
msgstr ""

#: ../../glossary/storage/path.rst:137
msgid ""
"If you need to access files at a specific time or transfer them multiple "
"times, use ``.get()`` method:"
msgstr ""

#: ../../glossary/storage/path.rst:153
msgid ""
"Multiple calls to the ``.get()`` method will always result in file "
"transfers, regardless of whether the files have changed or not. If the "
"path does not exist remotely, it will raise a ``FileNotFoundError``. If "
"you need to handle this case, the Path also offers a method to check if "
"files exist remotely."
msgstr ""

#: ../../glossary/storage/path.rst:162
msgid "Check if a file or folder exists"
msgstr ""

#: ../../glossary/storage/path.rst:164
msgid ""
"You can check if a path exists locally or remotely in the source Work "
"using the ``.exists_local()`` and ``.exists_remote()`` methods:"
msgstr ""

#: ../../glossary/storage/path.rst:185
msgid "Persist files"
msgstr ""

#: ../../glossary/storage/path.rst:187
msgid ""
"If a LightningWork finishes or stops due to an interruption (e.g., due to"
" insufficient credits), the filesystem and all files in it get deleted "
"(unless running locally). Lightning makes sure all Paths that are part of"
" the state get stored and made accessible to the other Works that still "
"need these files."
msgstr ""

#: ../../glossary/storage/path.rst:210
msgid "Example: Share a model checkpoint"
msgstr ""

#: ../../glossary/storage/path.rst:212
msgid ""
"A common workflow in ML is to use a checkpoint created by another "
"component. First, define a component that saves a checkpoint:"
msgstr ""

#: ../../glossary/storage/path.rst:239
msgid "Next, define a component that needs the checkpoints:"
msgstr ""

#: ../../glossary/storage/path.rst:253
msgid "Link both components via a parent component:"
msgstr ""

#: ../../glossary/storage/path.rst:278
msgid "Frequently Asked Questions"
msgstr ""

#: ../../glossary/storage/path.rst:280
msgid ""
"**Q: Can files in a LightningWork be accessed inside the LightningFlow "
"too?**"
msgstr ""

#: ../../glossary/storage/path.rst:282
msgid ""
"No, LightningFlow is intentionally designed not to perform filesystem "
"operations and computations and is intended to exclusively orchestrate "
"Flow and Work."
msgstr ""

#: ../../glossary/storage/path.rst:284
msgid ""
"**Q: Is it possible to reference any file using the Lightning lit:// path"
" notation?**"
msgstr ""

#: ../../glossary/storage/path.rst:286
msgid ""
"Yes, but only files for which the app has write permissions can be copied"
" from Work to Work (apps don't run with root priviliges)."
msgstr ""

#: ../../glossary/storage/path.rst:288
msgid "**Q: Can I access the Lightning Storage in my UI (StreamLit, Web, ...)?**"
msgstr ""

#: ../../glossary/storage/path.rst:290
msgid "This is currently not supported but will be in the future."
msgstr ""

#: ../../glossary/storage/path.rst:292
msgid "**Q: Should I define my lit:// path in the __init__ or the run method?**"
msgstr ""

#: ../../glossary/storage/path.rst:294
msgid ""
"You can declare a Lightning path anywhere you'd like. However, the "
"``.get()`` and ``.exists_*()`` methods only work inside of the run method"
" of a LightningWork."
msgstr ""

#: ../../glossary/storage/path.rst:296
msgid "**Q:How often does Lightning synchronize the files between my Work?**"
msgstr ""

#: ../../glossary/storage/path.rst:298
msgid ""
"Lightning does not synchronize the files between works. It only transfers"
" the files once when the Work ``run`` method starts. But you can call "
"``Path.get()`` as many times as you wish to transfer the latest file into"
" the current Work."
msgstr ""

#: ../../glossary/storage/path.rst:301
msgid "**Does Lightning provide me direct access to the shared cloud folder?**"
msgstr ""

#: ../../glossary/storage/path.rst:303
msgid ""
"No, and this is on purpose. This restriction forces developers to build "
"modular components that can be shared and integrated into apps easily. "
"This would be much harder to achieve if file paths in these components "
"would reference a global shared storage."
msgstr ""

