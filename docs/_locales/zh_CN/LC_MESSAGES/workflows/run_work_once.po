# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022-12
# This file is distributed under the same license as the URE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: URE 1.0rc\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-12-19 22:00+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"

#: ../../workflows/run_work_once.rst:3
msgid "Cache LightningWork Runs"
msgstr ""

#: ../../workflows/run_work_once.rst:5
msgid "**Audience:** Users who want to know how ``LightningWork`` works."
msgstr ""

#: ../../workflows/run_work_once.rst:7
msgid "**Level:** Advanced"
msgstr ""

#: ../../workflows/run_work_once.rst:9
msgid ""
"**Prereqs**: Level 16+ and read the `Event Loop guide "
"<../glossary/event_loop.html>`_."
msgstr ""

#: ../../workflows/run_work_once_content.rst:4
msgid "What caching the calls of Work's run method does for you"
msgstr ""

#: ../../workflows/run_work_once_content.rst:6
msgid ""
"By default, the run method in a LightningWork (Work) \"remembers\" "
"(caches) the input arguments it is getting called with and does not "
"execute again if called with the same arguments again. In other words, "
"the run method only executes when the input arguments have never been "
"seen before."
msgstr ""

#: ../../workflows/run_work_once_content.rst:9
msgid "You can turn caching on or off:"
msgstr ""

#: ../../workflows/run_work_once_content.rst:19
msgid ""
"To better understand this, imagine that every day you want to "
"sequentially download and process some data and then train a model on "
"that data. As explained in the `Event Loop guide "
"<../glossary/event_loop.html>`_, the Lightning App runs within an "
"infinite while loop, so the pseudo-code of your application might looks "
"like this:"
msgstr ""

#: ../../workflows/run_work_once_content.rst:34
msgid ""
"In this scenario, you want your components to run ``once`` a day, and no "
"more than that! But your code is running within an infinite loop, how can"
" this even work? This is where the Work's internal caching mechanism "
"comes in. By default, Lightning caches a hash of the input provided to "
"its run method and won't re-execute the method if the same input is "
"provided again. In the example above, the **data_processor** component "
"run method receives the string **\"05/25/22\"**. It runs one time and any"
" further execution during the day is skipped until tomorrow is reached "
"and the work run method receives **06/25/22**. This logic applies "
"everyday. This caching mechanism is inspired from how `React.js "
"Components and Props <https://reactjs.org/docs/components-and-"
"props.html>`_ renders websites. Only changes to the inputs re-trigger "
"execution."
msgstr ""

#: ../../workflows/run_work_once_content.rst:41
msgid "Caching Example"
msgstr ""

#: ../../workflows/run_work_once_content.rst:43
msgid "Here's an example of this behavior with LightningWork:"
msgstr ""

#: ../../workflows/run_work_once_content.rst:68
msgid "And you should see the following by running the code above:"
msgstr ""

#: ../../workflows/run_work_once_content.rst:78
msgid ""
"As you can see, the intermediate run didn't execute, as we would expected"
" when ``cache_calls=True``."
msgstr ""

#: ../../workflows/run_work_once_content.rst:82
msgid "Implications of turning caching off"
msgstr ""

#: ../../workflows/run_work_once_content.rst:84
msgid ""
"By setting ``cache_calls=False``, Lightning won't cache the return value "
"and re-execute the run method on every call."
msgstr ""

#: ../../workflows/run_work_once_content.rst:121
msgid ""
"Be aware than when setting both ``cache_calls=False`` and "
"``parallel=False`` to a work, the code after the ``self.work.run()`` is "
"unreachable as the work continuously execute in a blocking way."
msgstr ""

