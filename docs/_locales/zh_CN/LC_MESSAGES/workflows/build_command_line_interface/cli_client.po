# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022-12
# This file is distributed under the same license as the URE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: URE 1.0rc\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-12-19 22:00+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"

#: ../../workflows/build_command_line_interface/cli_client.rst:5
msgid "2. Develop a CLI with server and client code execution"
msgstr ""

#: ../../workflows/build_command_line_interface/cli_client.rst:7
msgid ""
"We've learned how to create a simple command-line interface. But in real-"
"world use-cases, an App Builder wants to provide more complex "
"functionalities where trusted code is executed on the client side."
msgstr ""

#: ../../workflows/build_command_line_interface/cli_client.rst:9
msgid ""
"Lightning provides a flexible way to create complex CLI without much "
"effort."
msgstr ""

#: ../../workflows/build_command_line_interface/cli_client.rst:11
msgid "In this example, weâ€™ll create a CLI to dynamically run Notebooks:"
msgstr ""

#: ../../workflows/build_command_line_interface/cli_client.rst:18
msgid "1. Implement a complex CLI"
msgstr ""

#: ../../workflows/build_command_line_interface/cli_client.rst:20
msgid "First of all, lets' create the following file structure:"
msgstr ""

#: ../../workflows/build_command_line_interface/cli_client.rst:30
msgid ""
"We'll use the `Jupyter-Component <https://github.com/Lightning-AI/LAI-"
"Jupyter-Component>`_. Follow the installation steps on the repo to "
"install the Component."
msgstr ""

#: ../../workflows/build_command_line_interface/cli_client.rst:32
msgid "Add the following code to ``commands/notebook/run.py``:"
msgstr ""

#: ../../workflows/build_command_line_interface/cli_client.rst:36
msgid "Add the following code to ``app.py``:"
msgstr ""

#: ../../workflows/build_command_line_interface/cli_client.rst:44
msgid "2. Run the App and check the API documentation"
msgstr ""

#: ../../workflows/build_command_line_interface/cli_client.rst:46
msgid ""
"In a terminal, run the following command and open "
"``http://127.0.0.1:7501/docs`` in a browser."
msgstr ""

#: ../../workflows/build_command_line_interface/cli_client.rst:58
msgid "3. Connect to a running App"
msgstr ""

#: ../../workflows/build_command_line_interface/cli_client.rst:60
msgid ""
"In another terminal, connect to the running App. When you connect to an "
"App, the Lightning CLI is replaced by the App CLI. To exit the App CLI, "
"you need to run ``lightning disconnect``."
msgstr ""

#: ../../workflows/build_command_line_interface/cli_client.rst:71
msgid "To see a list of available commands:"
msgstr ""

#: ../../workflows/build_command_line_interface/cli_client.rst:86
msgid "To find the arguments of the commands:"
msgstr ""

#: ../../workflows/build_command_line_interface/cli_client.rst:106
msgid "4. Execute a command"
msgstr ""

#: ../../workflows/build_command_line_interface/cli_client.rst:108
msgid "And then you can trigger the command-line exposed by your App."
msgstr ""

#: ../../workflows/build_command_line_interface/cli_client.rst:110
msgid "Run the first Notebook with the following command:"
msgstr ""

#: ../../workflows/build_command_line_interface/cli_client.rst:118
msgid "And run a second notebook."
msgstr ""

#: ../../workflows/build_command_line_interface/cli_client.rst:126
msgid "Here is a recording of the Lightning App:"
msgstr ""

#: ../../workflows/build_command_line_interface/cli_client.rst:139
msgid "5. Disconnect from the App"
msgstr ""

#: ../../workflows/build_command_line_interface/cli_client.rst:141
msgid "To exit the App CLI, you need to run **lightning disconnect**."
msgstr ""

#: ../../workflows/build_command_line_interface/cli_client.rst:152
msgid "Learn more"
msgstr ""

