# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022-12
# This file is distributed under the same license as the URE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: URE 1.0rc\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-12-19 22:00+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"

#: ../../api_reference/generated/lightning.app.frontend.panel.PanelFrontend.rst:7
msgid "PanelFrontend"
msgstr ""

#: lightning.app.frontend.panel.panel_frontend.PanelFrontend:1 of
msgid "Bases: :py:class:`lightning.app.frontend.frontend.Frontend`"
msgstr ""

#: lightning.app.frontend.panel.panel_frontend.PanelFrontend:1 of
msgid ""
"The `PanelFrontend` enables you to serve Panel code as a Frontend for "
"your LightningFlow."
msgstr ""

#: lightning.app.frontend.panel.panel_frontend.PanelFrontend:3 of
msgid "Reference: https://lightning.ai/lightning-docs/workflows/add_web_ui/panel/"
msgstr ""

#: lightning.app.frontend.panel.panel_frontend.PanelFrontend
#: lightning.app.frontend.panel.panel_frontend.PanelFrontend.start_server of
msgid "Parameters"
msgstr ""

#: lightning.app.frontend.panel.panel_frontend.PanelFrontend:6 of
msgid ""
"The path to a .py or .ipynb file, or a pure function. The file or "
"function must contain your Panel code. The function can optionally accept"
" an ``AppStateWatcher`` argument."
msgstr ""

#: lightning.app.frontend.panel.panel_frontend.PanelFrontend of
msgid "Raises"
msgstr ""

#: lightning.app.frontend.panel.panel_frontend.PanelFrontend:9 of
msgid "Raised if the ``entry_point`` provided is a class method"
msgstr ""

#: lightning.app.frontend.panel.panel_frontend.PanelFrontend:11 of
msgid "Example:"
msgstr ""

#: lightning.app.frontend.panel.panel_frontend.PanelFrontend:13 of
msgid "To use the `PanelFrontend`, you must first install the `panel` package:"
msgstr ""

#: lightning.app.frontend.panel.panel_frontend.PanelFrontend:19 of
msgid ""
"Create the files `panel_app_basic.py` and `app_basic.py` with the content"
" below."
msgstr ""

#: lightning.app.frontend.panel.panel_frontend.PanelFrontend:21 of
msgid "**panel_app_basic.py**"
msgstr ""

#: lightning.app.frontend.panel.panel_frontend.PanelFrontend:29 of
msgid "**app_basic.py**"
msgstr ""

#: lightning.app.frontend.panel.panel_frontend.PanelFrontend:53 of
msgid "Start the Lightning server with `lightning run app app_basic.py`."
msgstr ""

#: lightning.app.frontend.panel.panel_frontend.PanelFrontend:55 of
msgid ""
"For development you can get Panel autoreload by setting the "
"``PANEL_AUTORELOAD`` environment variable to 'yes', i.e. run "
"``PANEL_AUTORELOAD=yes lightning run app app_basic.py``"
msgstr ""

#: lightning.app.frontend.panel.panel_frontend.PanelFrontend.start_server:1 of
msgid ""
"Start the process that serves the UI at the given hostname and port "
"number."
msgstr ""

#: lightning.app.frontend.panel.panel_frontend.PanelFrontend.start_server:4 of
msgid ""
"The hostname where the UI will be served. This gets determined by the "
"dispatcher (e.g., cloud), but defaults to localhost when running locally."
msgstr ""

#: lightning.app.frontend.panel.panel_frontend.PanelFrontend.start_server:7 of
msgid ""
"The port number where the UI will be served. This gets determined by the "
"dispatcher, which by default chooses any free port when running locally."
msgstr ""

#: lightning.app.frontend.panel.panel_frontend.PanelFrontend.start_server:10 of
msgid "root_path for the server if app in exposed via a proxy at `/<root_path>`"
msgstr ""

#: lightning.app.frontend.panel.panel_frontend.PanelFrontend.start_server:13
#: lightning.app.frontend.panel.panel_frontend.PanelFrontend.stop_server:6 of
msgid "Example"
msgstr ""

#: lightning.app.frontend.panel.panel_frontend.PanelFrontend.start_server:14 of
msgid "An custom implementation could look like this:"
msgstr ""

#: lightning.app.frontend.panel.panel_frontend.PanelFrontend.start_server
#: lightning.app.frontend.panel.panel_frontend.PanelFrontend.stop_server of
msgid "Return type"
msgstr ""

#: lightning.app.frontend.panel.panel_frontend.PanelFrontend.start_server:22
#: lightning.app.frontend.panel.panel_frontend.PanelFrontend.stop_server:13 of
msgid ":py:obj:`None`"
msgstr ""

#: lightning.app.frontend.panel.panel_frontend.PanelFrontend.stop_server:1 of
msgid ""
"Stop the process that was started with :meth:`start_server` so the App "
"can shut down."
msgstr ""

#: lightning.app.frontend.panel.panel_frontend.PanelFrontend.stop_server:3 of
msgid "This method gets called when the LightningApp terminates."
msgstr ""

